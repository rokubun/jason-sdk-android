apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

//take a look at https://github.com/bintray/gradle-bintray-plugin#buildgradle
ext {
    // This configuration will result in:
    // compile '<groupId>:<artifactId>:<libVersion>'
    PUBLISH_GROUP_ID = 'cat.rokubun.jason' // package name of the project
    PUBLISH_ARTIFACT_ID = 'sdk' // module name of the library
    PUBLISH_VERSION = gitVersionName

}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
        task javadoc(type: Javadoc, dependsOn: dokka) {
        }
    }
}

task javadocJar(type: Jar, dependsOn: dokka) {
    archiveClassifier.set('javadoc')
    from dokka.outputDirectory
}
artifacts {
    archives androidSourcesJar
    archives javadocJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION
            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/jason-${project.getName()}-${version}.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            artifact androidSourcesJar
            artifact javadocJar

            pom {
                name = 'Android SDK for Jason GNSS Positioning-as-a-Service'
                description = 'Jason is Rokubun\'s Cloud PPK Service, a cloud service that compute the position of a receiver using the raw GNSS measurements.'
                url = 'https://github.com/rokubun/jason-sdk-android'
                licenses {
                    license {
                        name = 'JASON License'
                        url = 'https://github.com/rokubun/jason-sdk-android/blob/master/LICENSE'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:rokubun/jason-sdk-android.git'
                    developerConnection = 'scm:git:ssh://github.com/rokubun/jason-sdk-android.git'
                    url = 'https://github.com/rokubun/jason-sdk-android'
                }
                withXml {
                    version gitVersionName
                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/content/repositories/releases/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

nexusStaging {
        packageGroup = PUBLISH_GROUP_ID
        stagingProfileId = sonatypeStagingProfileId
        username = ossrhUsername
        password = ossrhPassword
    }
signing {
    sign publishing.publications
}
